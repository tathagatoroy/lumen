   Compiling lumen v0.1.0 (C:\Users\91833\Tathagato\learning_rust\lumen)
error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
  --> src/main.rs:67:14
   |
67 | fn main() -> Result<(), EditorError> {
   |              ^^^^^^     ----------- help: remove this generic argument
   |              |
   |              expected 1 generic argument
   |
note: type alias defined here, with 1 generic parameter: `T`
  --> C:\Users\91833\.cargo\registry\src\index.crates.io-6f17d22bba15001f\crossterm-0.26.1\src\error.rs:6:10
   |
6  | pub type Result<T> = std::result::Result<T, ErrorKind>;
   |          ^^^^^^ -

error[E0119]: conflicting implementations of trait `From<std::io::Error>` for type `EditorError`
  --> src\utils\error.rs:29:1
   |
23 | impl From<io::Error> for EditorError {
   | ------------------------------------ first implementation here
...
29 | impl From<CrosstermErrorKind> for EditorError {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `EditorError`

error[E0277]: `?` couldn't convert the error to `std::io::Error`
  --> src/main.rs:77:35
   |
67 | fn main() -> Result<(), EditorError> {
   |              ----------------------- expected `std::io::Error` because of this
...
77 |     let config = Config::new(args)?;
   |                  -----------------^ the trait `From<Box<dyn StdError>>` is not implemented for `std::io::Error`, which is required by `Result<(), std::io::Error>: FromResidual<Result<Infallible, Box<dyn StdError>>>`
   |                  |
   |                  this can't be annotated with `?` because it has type `Result<_, Box<(dyn StdError + 'static)>>`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             `std::io::Error` implements `From<IntoInnerError<W>>`
             `std::io::Error` implements `From<NulError>`
             `std::io::Error` implements `From<TryReserveError>`
             `std::io::Error` implements `From<anstyle_wincon::windows::inner::IoError>`
             `std::io::Error` implements `From<std::io::ErrorKind>`
   = note: required for `Result<(), std::io::Error>` to implement `FromResidual<Result<Infallible, Box<dyn StdError>>>`

Some errors have detailed explanations: E0107, E0119, E0277.
For more information about an error, try `rustc --explain E0107`.
error: could not compile `lumen` (bin "lumen") due to 3 previous errors
